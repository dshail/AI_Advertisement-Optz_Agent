name: 🚀 AI Marketing Agent v2.0 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 🧪 Testing Pipeline
  test:
    name: 🧪 Run Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 safety bandit
    
    - name: 🔍 Code quality checks
      run: |
        # Format check
        black --check --diff .
        
        # Linting
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # Security check
        safety check
        bandit -r . -f json || true
    
    - name: 🧪 Run unit tests
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        pytest test_ad_optimizer.py -v --cov=ad_optimizer --cov-report=xml
    
    - name: 🔌 Test API endpoints
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        python test_openai_simple.py
    
    - name: 🐳 Test Docker build
      run: |
        docker build -t ai-marketing-agent:test .
    
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 🏗️ Build & Push Docker Image
  build:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ai-marketing-agent
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy to Production
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          # Navigate to application directory
          cd ${{ secrets.PROD_APP_PATH }}
          
          # Pull latest changes
          git pull origin main
          
          # Update environment variables
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" > .env
          echo "RATE_LIMIT_REQUESTS_PER_MINUTE=60" >> .env
          echo "CACHE_TTL_SECONDS=300" >> .env
          echo "LOG_LEVEL=INFO" >> .env
          
          # Deploy with Docker Compose
          docker-compose down
          docker-compose pull
          docker-compose up -d --build
          
          # Health check
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          
          # Clean up old images
          docker image prune -f

  # 🧪 Post-Deploy Tests
  integration-test:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Health check
      run: |
        curl -f ${{ secrets.PROD_URL }}/health
    
    - name: 🧪 Test main endpoints
      run: |
        # Test ad generation
        curl -X POST "${{ secrets.PROD_URL }}/run-agent" \
          -H "Content-Type: application/json" \
          -d '{
            "ad_text": "Test deployment with our amazing product!",
            "tone": "friendly",
            "platforms": ["facebook"]
          }' | jq '.rewritten_ads.facebook'
        
        # Test metrics
        curl -f ${{ secrets.PROD_URL }}/metrics
    
    - name: 📊 Performance test
      run: |
        # Simple load test
        for i in {1..5}; do
          curl -X POST "${{ secrets.PROD_URL }}/run-agent" \
            -H "Content-Type: application/json" \
            -d '{
              "ad_text": "Load test '$i'",
              "tone": "professional",
              "platforms": ["linkedin"]
            }' &
        done
        wait

  # 📢 Notification
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, integration-test]
    if: always()
    
    steps:
    - name: 📢 Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 AI Marketing Agent v2.0 Deployment
          Status: ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          URL: ${{ secrets.PROD_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}